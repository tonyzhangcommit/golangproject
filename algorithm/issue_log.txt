var a bool = true
func main() {
    defer func(){
        fmt.Println("1")
    }()
    if a == true {
        fmt.Println("2")
        return
    }
    defer func(){
        fmt.Println("3")
    }()   # 这个defer 不会执行，defer执行前提是先注册，上一步returen后不会注册，所以不执行
}

type People interface {
    Show()
}

type Student struct{}

func (stu *Student) Show() {

}

func main() {

    var s *Student
    if s == nil {
        fmt.Println("s is nil")
    } else {
        fmt.Println("s is not nil")
    }
    var p People = s
    if p == nil {   这里的p 不是nil， 判断接口是否为nil，只有动态值和动态类型同时为nil才为nil
        fmt.Println("p is nil")
    } else {
        fmt.Println("p is not nil")
    }
}


type Math struct {
    x, y int
}

var m = map[string]Math{
    "foo": Math{2, 3},
}

func main() {
    m["foo"].x = 4    map 中的value 默认不可寻址， 不能直接进行赋值操作
    fmt.Println(m["foo"].x)
}
